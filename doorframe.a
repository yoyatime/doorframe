
	processor 6502
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Constants
TitleScreen 	equ #$00
GameScreen 	equ #$01
EarthColu	equ #$D2
SkyColu		equ #$AA
KongolHeight  	equ #24
GateHeight	equ #30
GateInitY	equ #50
KongolInitY	equ #$20
KongolInitX     equ #$70
SkyHeight 	equ #16
ArenaHeight 	equ #(192 - SkyHeight - ScoreHeight)/2
ScoreHeight	equ #16
ScoreBKColu	equ #$A0
Standing	equ #$00
Ducking		equ #$01

XLimitLow	equ #$12
XLimitHigh	equ #$7C
YLimitLow	equ #$1A
YLimitHigh	equ #$50

; Variables segment

        	seg.u Variables
		org $80

; Title Screen Memory Overlay
Mode		ds 1		;0 = Title Screen
				;1 = Game
                                
; Game Screen Memory Overlay                
Temp		ds 1
KongolColorSelected	ds 2
KongolGFXSelected 	ds 2
KongolGFXPtr  	ds 2
KongolColorPtr	ds 2
KongolYPos	ds 1		;range: (13,99)
KongolXPos 	ds 1		;range: (0F,8C)
KongolState	ds 1
Score		ds 1
ScoreDigitOnes  ds 1
ScoreDigitTens	ds 1
ScoreGFX	ds 1
GameSpeed	ds 1
GateYPos   	ds 1
GateDraw	ds 1
KongolDraw	ds 1
KongolPtr	ds 2
GatePtr		ds 2
Colp0	byte
Colp1	byte
YP0	byte	; Y counter for player 0
YP1	byte	; Y counter for player 1

;DigitGFX
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment

	seg Code
        org $f000

Start
	CLEAN_START
        
        lda GateInitY
        sta GateYPos
        
        lda #5
        ldx #$01
        jsr SetHorizPos
        
        lda #%00000000
        sta CTRLPF
        
        lda #KongolInitX
        sta KongolXPos
        
        lda #KongolInitY
        sta KongolYPos
        
        lda #51
        sta GateYPos
        
        lda #$FA
        sta COLUP1
        
        
        lda #%101		;Set doublewide P0
        sta NUSIZ0        
        
        lda #TitleScreen	;Start at Title Screen
        sta Mode		;
        
NextFrame
        lsr SWCHB	; test Game Reset switch
        bcc Start	; reset?
; 1 + 3 lines of VSYNC
	VERTICAL_SYNC
; 36 lines of underscan
	TIMER_SETUP 35
        TIMER_WAIT

; 192 lines of frame
        
        cmp Mode	 		;Jump to set gamemode
        bne DrawGameScreenStart

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Title Screen
DrawTitleScreen
	
        ldx #192		;X = scanline number
        ldy #$0			;y = vertical pixel height counter
        lda INPT4		;scan for player 0 input to switch to gameplay logic
	rol 			;player 0 joystick button is high bit of INPT4
        bcs DrawTitleScreenLoop
        lda #GameScreen		;set gamemode to game screen
        sta Mode		;
        
DrawTitleScreenLoop        
        txa
        adc #$FB		;Color Playfield with COLU X + 3
        sta COLUPF
        
        lda PF0Title,y		;Write title screen graphics
        sta PF0			;
        			
        lda PF1Title,y
        sta PF1
        
        lda PF2Title,y
        sta PF2
        
        lda PF3Title,y
        sta PF0
        
        lda PF4Title,y
        sta PF1
        
        lda PF5Title,y
        sta PF2
        
        txa
        and #%00000111		;increment Y every 4th scanline
        cmp #%00000100		;
        bne TitleLineFinish	;
        iny			;
        
TitleLineFinish    
        
        
        sta WSYNC
	dex
        bne DrawTitleScreenLoop
        jsr Overscan
	jmp NextFrame


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Game Screen



DrawGameScreenStart
	;ldy #192		;Y -> scanline number


; KongolDraw = ARENA_HEIGHT + KongolHeight - Y position
        lda #(ArenaHeight + KongolHeight)
        sec
        sbc KongolYPos
        sta KongolDraw
        
; HumanPtr = HumanGfx + HUMAN_HEIGHT - 1 - Y position
	lda <KongolGFXSelected
        adc #KongolHeight-2

        sec
        sbc KongolYPos
        sta KongolPtr
        
        lda #$F2			
        
        sbc #0
        sta KongolPtr+1
; ColorPtr = HumanGfx + HUMAN_HEIGHT - 1 - Y position  
	lda KongolColorSelected
        adc #KongolHeight-2

        sec
        sbc KongolYPos
        sta KongolColorPtr
        
        lda #$F2			
        
        sbc #0
        sta KongolColorPtr+1
        
        
; GateDraw = ARENA_HEIGHT + HUMAN_HEIGHT - Y position
        lda #(ArenaHeight + GateHeight)
        sec
        sbc GateYPos
        sta GateDraw
        
; GatePtr = GateGfx + GATE_HEIGHT - 1 - Y position
        lda #<(GateGFX + GateHeight - 1)
        sec
        sbc GateYPos
        sta GatePtr
        lda #>(GateGFX + GateHeight - 1)
        sbc #0
        sta GatePtr+1
        
        
        lda KongolState
        ror
        bcc AwaitingInput
        
SlidingLeft
	dec KongolXPos

AwaitingInput
	lda INPT4        	
        rol 			;player 0 joystick button is high bit of INPT4
        bcs TestUp
        
        lda #<KongolDuckingG
        sta KongolGFXSelected
        
        lda #>KongolDuckingG
        sta KongolGFXSelected+1
        
        lda #<KongolDuckingC
        sta KongolColorSelected
        
        lda #>KongolDuckingC
        sta KongolColorSelected+1
        
        
        
        lda #Ducking
        sta KongolState
        jmp InputDone
        

        
TestUp
	lda #<KongolStandingG
        sta KongolGFXSelected
        
        lda #>KongolStandingG
        sta KongolGFXSelected+1

	lda #<KongolStandingC
        sta KongolColorSelected
        
        lda #>KongolStandingC
        sta KongolColorSelected+1
	
	lda #Standing
        sta KongolState
        lda SWCHA		

	and #%00010000		;Test Joystick Right
        bne TestDown
        inc KongolYPos
        
        jmp InputDone
        
TestDown
	lda SWCHA
	and #%00100000		;Test Joystick Left
        
        bne InputDone
        dec KongolYPos
        
InputDone
	sta WSYNC
	ldx #0			;Clear playfield
        stx PF0
        stx PF1
        stx PF2
        
        lda KongolYPos		;Horizontal Bound Checking
        cmp #YLimitLow
        bcs InBoundsLow

        lda #YLimitLow
        sta KongolYPos
        ;jmp InBounds
        
InBoundsLow
	cmp #YLimitHigh
        bcc InBounds
        lda #YLimitHigh
        sta KongolYPos
        
InBounds
        sta WSYNC
        lda KongolXPos		;set 
        jsr SetHorizPos
        
        
        
        
        
Kernel         			;Kernel Start
        jsr DrawSkyline
        ;jsr DrawGameScreenOld
        jsr ArenaDraw
        jsr DrawScore
        jsr Overscan
        jmp NextFrame




DrawSkyline
	ldx #6			;X -> iterations of sky 
        lda #$AA 		;set BK sky to blue
        
        sta COLUBK
	sta WSYNC
	lda #EarthColu		;set PF mountains to green
        sta COLUPF
        lda #0
        ;sta PF1
        ;sta PF0

        sta WSYNC		;2 scanlines of sky without mountains
        
        			;Position P1
        ;sleep 20
        ;sta RESP1
        
        
        sta WSYNC		
        
DrawSkylineLoop
        lda PF0Sky,X
        sta PF0
        
        lda PF1Sky,X
        sta PF1
        
        lda PF2Sky,X
        sta PF2
        
        
        sta WSYNC		;2 scanline resolution for mountains
        sta WSYNC
        
        dex
        bne DrawSkylineLoop
        
        lda #$0		
        sta PF0
        sta PF1
        sta PF2
        lda #EarthColu		;set gamescreen BK to green
        sta COLUBK
        ldx #(192 - SkyHeight - ScoreHeight)/2	;number of scanlines remaining
        
	rts
        
        		

DrawScore
	sta WSYNC
        lda #0
        sta PF1
        sta PF0
        sta PF2
	lda #ScoreBKColu
        sta COLUBK
	
        lda #30
        sta COLUPF
        
	lda Score			
        and #$0F
        sta Temp
        
        asl
        asl
        adc Temp
        sta ScoreDigitOnes
        
        lda Score
        and #$F0
        lsr
        lsr
        sta Temp
        lsr
        lsr
        adc Temp
        sta ScoreDigitTens
	
	
        ldx #5
        
DrawScoreLoop
	ldy ScoreDigitTens
        lda DigitsG,y
        and #$F0
        sta ScoreGFX
        ldy ScoreDigitOnes
        lda #$0
        sta PF1
        
        lda DigitsG,y
        and #$0F
        ora ScoreGFX
        sta ScoreGFX
        
        sta WSYNC
        ;
        sta PF1
        ldy ScoreGFX
        
        nop			;Wait for asymmetric PF
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        nop
        ldy #$0			;Clear right side of PF
        sty PF1
        sta WSYNC
        ;
        ;sty PF1
        inc ScoreDigitTens
        inc ScoreDigitOnes
        dex
        sta PF1
        bne DrawScoreLoop
        ldy #$0
        sty PF1
        sta WSYNC
        
        
        
        ;
        ;stx PF1
        ;sta WSYNC

        dex
        sta WSYNC
        ; bne DrawScoreLoop
	
        
        rts
        ;jsr Overscan		;Draw Overscan
        
        ;		;Start Next Frame
        
        

; 29 lines of overscan
Overscan
	;inc Score
        ;inc Score
        
        lda #$00
        sta COLUBK	;set over/underscan BG to black
        sta COLUPF	;set over/underscan PF to black
        sta PF0
        sta PF1
        sta PF2
        sta GRP0
        sta GRP1
	
        
       
        
	TIMER_SETUP 29
        TIMER_WAIT
        
        
; total = 262 lines, go to next frame
        rts

ArenaDraw
	
	lda #%00110000
        sta PF0
        lda #$F2
        sta COLUPF
        
        lda #%00000001
        sta CTRLPF
        
        
        ldy #ArenaHeight   ; 2  7 - the arena will be 180 scanlines (from 0-89)*2   
        
        
ArenaLoop:                  ;   13 - from bpl ArenaLoop
    ; continuation of line 2 of the 2LK
    ; this precalculates data that's used on line 1 of the 2LK

        lda #KongolHeight-1 ; 2 15 - height of the humanoid graphics, subtract 1 due to starting with 0
        dcp KongolDraw      ; 5 20 - Decrement HumanDraw and compare with height
        bcs DoDrawGrp0      ; 2 22 - (3 23) if Carry is Set, then humanoid is on current scanline
        lda #0              ; 2 24 - otherwise use 0 to turn off player0
        .byte $2C           ; 4 28 - $2C = BIT with absolute addressing, trick that
                            ;        causes the lda (HumanPtr),y to be skipped
DoDrawGrp0:                 ;   23 - from bcs DoDrawGrp0
        lda (KongolPtr),y   ; 5 28 - load the shape for player0
        sta WSYNC           ; 3 31
;---------------------------------------
    ; start of line 1 of the 2LK
        sta GRP0            ; 3  3 - @ 0-22, update player0 to draw Human
        lda (KongolColorPtr),y
        sta COLUP0
        ;ldx #%11111111      ; 2  5 - playfield pattern for vertical alignment testing
	
    ; precalculate data that's needed for line 2 of the 2LK        
        lda #GateHeight-1 ; 2 10 - height of the humanoid graphics, 
        dcp GateDraw         ; 5 15 - Decrement BoxDraw and compare with height
        bcs DoDrawGrp1      ; 2 17 - (3 18) if Carry is Set, then box is on current scanline
        lda #0              ; 2 19 - otherwise use 0 to turn off player1
        ;sta PF0
        .byte $2C           ; 4 23 - $2C = BIT with absolute addressing, trick that
                            ;        causes the lda (BoxPtr),y to be skipped
DoDrawGrp1:                 ;   18 - from bcs DoDrawGRP1
        lda (GatePtr),y      ; 5 23 - load the shape for the box
        sta WSYNC           ; 3 26
;---------------------------------------
    ; start of line 2 of the 2LK
        sta GRP1            ; 3  3 - @0-22, update player1 to draw box
        ldx #0              ; 2  5 - PF pattern for alignment testing
        ;stx PF0             ; 3  8 - @0-22
        dey                 ; 2 10 - decrease the 2LK loop counter
        bne ArenaLoop       ; 2 12 - (3 13) branch if there's more Arena to draw

	rts


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set horizontal position subroutine
SetHorizPos
        sta HMCLR
        sta WSYNC       ; start a new line
        sec             ; set carry flag
DivideLoop
        sbc #15         ; subtract 15
        bcs DivideLoop  ; branch until negative
        eor #7          ; calculate fine offset
        asl
        asl
        asl
        asl
        sta HMP0,x      ; set fine offset
        sta RESP0,x     ; fix coarse position
        sta WSYNC
        sta HMOVE
        rts             ; return to caller 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Graphical Data

;---Sprite Data from PlayerPal 2600---

KongolStandingG
        .byte #%01100110;$06
        .byte #%01100110;$F0
        .byte #%01100110;$F0
        .byte #%00100100;$2C
        .byte #%00100100;$2C
        .byte #%00111100;$F2
        .byte #%00111100;$04
        .byte #%00111100;$2C
        .byte #%10111101;$2C
        .byte #%10111101;$2C
        .byte #%10111101;$F2
        .byte #%10111101;$F2
        .byte #%11111111;$2C
        .byte #%11111111;$2C
        .byte #%11111111;$2C
        .byte #%11111111;$18
        .byte #%00011000;$2C
        .byte #%00111100;$2C
        .byte #%00111100;$2C
        .byte #%00111100;$30
        .byte #%00111100;$2C
        .byte #%00011000;$F0
        .byte #%00011000;$F0
        .byte #%00011000;$F0
        
        
KongolDuckingG
        .byte #%11100110;$04
        .byte #%01100011;$F0
        .byte #%01100111;$2C
        .byte #%01100110;$2C
        .byte #%01111110;$F0
        .byte #%01111110;$F0
        .byte #%00111100;$2C
        .byte #%00111101;$2C
        .byte #%00111101;$F2
        .byte #%00111101;$2C
        .byte #%11111111;$2C
        .byte #%11111111;$2C
        .byte #%11111111;$E6
        .byte #%10011000;$2C
        .byte #%10111100;$2C
        .byte #%00111100;$2C
        .byte #%00111100;$30
        .byte #%00111100;$2C
        .byte #%00011000;$F0
        .byte #%00011000;$F0
        .byte #%00000000;$F0
        .byte #%00000000;--
        .byte #%00000000;--
        .byte #%00000000;--

KongolStandingC
        .byte #$06;
        .byte #$F0;
        .byte #$F0;
        .byte #$2C;
        .byte #$2C;
        .byte #$F2;
        .byte #$04;
        .byte #$2C;
        .byte #$2C;
        .byte #$2C;
        .byte #$F2;
        .byte #$F2;
        .byte #$2C;
        .byte #$2C;
        .byte #$2C;
        .byte #$18;
        .byte #$2C;
        .byte #$2C;
        .byte #$2C;
        .byte #$30;
        .byte #$2C;
        .byte #$F0;
        .byte #$F0;
        .byte #$F0;

KongolDuckingC
        .byte #$04;
        .byte #$F0;
        .byte #$2C;
        .byte #$2C;
        .byte #$F0;
        .byte #$F0;
        .byte #$2C;
        .byte #$2C;
        .byte #$F2;
        .byte #$F2;
        .byte #$2C;
        .byte #$2C;
        .byte #$18;
        .byte #$2C;
        .byte #$2C;
        .byte #$2C;
        .byte #$30;
        .byte #$2C;
        .byte #$F0;
        .byte #$F0;
        .byte #$F0;
        .byte #$0E;
        .byte #$0E;
        .byte #$0E;

GateGFX
	.byte #%11000000;$F2
	.byte #%11110000;$F2
        .byte #%11111111;$F2
        .byte #%10000000;$F2
        .byte #%10000000;$F0
        .byte #%10000000;$F0
        .byte #%10000000;$F0
        .byte #%10000000;$F0
        .byte #%10000000;$F0
        .byte #%10000000;$F0
        .byte #%10000000;$F0
        .byte #%10000000;$F0
        .byte #%10000000;$F2
        .byte #%10000000;$04
        .byte #%10000000;$06
        .byte #%10000000;$06
        .byte #%10000000;$06
        .byte #%10000000;$06
        .byte #%10000000;$06
        .byte #%10000000;$06
        .byte #%10000000;$06
        .byte #%10000000;$06
        .byte #%10000000;$02
        .byte #%10000000;$06
        .byte #%10000000;$06
        .byte #%10000000;$06
        .byte #%10000000;$02
        .byte #%11111111;$F0
        .byte #%11110000;$02
        .byte #%11000000;$F2

GateColor
        .byte #$F2;
        .byte #$F2;
        .byte #$F2;
        .byte #$F0;
        .byte #$F0;
        .byte #$F0;
        .byte #$F0;
        .byte #$F0;
        .byte #$F0;
        .byte #$F0;
        .byte #$F0;
        .byte #$F2;
        .byte #$04;
        .byte #$06;
        .byte #$06;
        .byte #$06;
        .byte #$06;
        .byte #$06;
        .byte #$06;
        .byte #$06;
        .byte #$06;
        .byte #$02;
        .byte #$F0;
        .byte #$F0;
        
;---End Sprite Data---

;---Begin Digit Data---

DigitsG
	.byte %01110111
        .byte %01010101
	.byte %01010101
        .byte %01010101
        .byte %01110111
	
        .byte %00010001
        .byte %00010001
        .byte %00010001
        .byte %00010001
        .byte %00010001
        
        .byte %01110111
        .byte %00010001
        .byte %01110111
        .byte %01000100
        .byte %01110111
        
        .byte %01110111
        .byte %00010001
        .byte %01110111
        .byte %00010001
        .byte %01110111
        
        .byte %01010101
        .byte %01010101
        .byte %01110111
        .byte %00010001
        .byte %00010001
        
        .byte %01110111
        .byte %01000100
        .byte %01110111
        .byte %00010001
        .byte %01110111
        
        .byte %01110111
        .byte %01000100
        .byte %01110111
        .byte %01010101
        .byte %01110111
        
        .byte %01110111
        .byte %00010001
        .byte %00010001
        .byte %00010001
        .byte %00010001
        
        .byte %01110111
        .byte %01010101
        .byte %01110111
        .byte %01010101
        .byte %01110111
        
        .byte %01110111
        .byte %01010101
        .byte %01110111
        .byte %00010001
        .byte %01110111
        
        .byte %00100010
        .byte %01010101
        .byte %01110111
        .byte %01010101
        .byte %01010101
         
        .byte %01100110
        .byte %01010101
        .byte %01100110
        .byte %01010101
        .byte %01100110
        
        .byte %00110011
        .byte %01000100
        .byte %01000100
        .byte %01000100
        .byte %00110011
        
        .byte %01100110
        .byte %01010101
        .byte %01010101
        .byte %01010101
        .byte %01100110
        
        .byte %01110111
        .byte %01000100
        .byte %01100110
        .byte %01000100
        .byte %01110111
        
        .byte %01110111
        .byte %01000100
        .byte %01100110
        .byte %01000100
        .byte %01000100
        
;---End Digit Data

;---Begin Game Screen PF Data---

PF0Sky
	.byte %00000000
	.byte %11110000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000

PF1Sky
	.byte %00000000
	.byte %11111111
	.byte %11111111
	.byte %01111111
	.byte %00111111
	.byte %00011110
	.byte %00001100

PF2Sky
	.byte %00000000
	.byte %11111111
	.byte %01110011
	.byte %00100001
	.byte %00000000
	.byte %00000000
	.byte %00000000

;---End Game Screen PF Data---

;---Begin Title Screen PF Data---
PF0Title
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %10000000
	.byte %10000000
	.byte %10000000
	.byte %10000000
	.byte %00000000
	.byte %00000000
	.byte %11100000
	.byte %01100000
	.byte %10000000
	.byte %11100000
	.byte %00000000
	.byte %00000000
	.byte %10000000
	.byte %10000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000

PF1Title
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00101111
	.byte %01001001
	.byte %11001001
	.byte %00101111
	.byte %00000000
	.byte %00000000
	.byte %10111101
	.byte %00011001
	.byte %10011001
	.byte %10011001
	.byte %00000000
	.byte %00000000
	.byte %11111111
	.byte %11111111
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000

PF2Title
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %11010010
	.byte %01010110
	.byte %01011010
	.byte %11010010
	.byte %00000000
	.byte %00000000
	.byte %10010111
	.byte %10010100
	.byte %10010011
	.byte %11110100
	.byte %00000000
	.byte %00000000
	.byte %11111111
	.byte %11111111
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000

PF3Title
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %10110000
	.byte %10000000
	.byte %10100000
	.byte %10110000
	.byte %00000000
	.byte %00000000
	.byte %11100000
	.byte %00100000
	.byte %00100000
	.byte %11100000
	.byte %00000000
	.byte %00000000
	.byte %11110000
	.byte %11110000
	.byte %00000000
	.byte %10010000
	.byte %11110000
	.byte %11110000
	.byte %11100000
	.byte %11000000
	.byte %00000000

PF4Title
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %11101000
	.byte %00101000
	.byte %00101000
	.byte %11101111
	.byte %00000000
	.byte %00000000
	.byte %10111101
	.byte %00100001
	.byte %10100101
	.byte %10111101
	.byte %00000000
	.byte %00000000
	.byte %11111111
	.byte %11111111
	.byte %11111111
	.byte %11111111
	.byte %11111111
	.byte %11111111
	.byte %11111111
	.byte %11111111
	.byte %00000000

PF5Title
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00000000
	.byte %00111101
	.byte %00001101
	.byte %00110000
	.byte %00111100
	.byte %00000000
	.byte %00000000
	.byte %11110000
	.byte %00010000
	.byte %00110000
	.byte %11110111
	.byte %00000000
	.byte %00000000
	.byte %00000001
	.byte %00000001
	.byte %00000000
	.byte %00001001
	.byte %00001111
	.byte %00001111
	.byte %00000111
	.byte %00000011
	.byte %00000000

;---End Title Screen PF Data---

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Epilogue
	org $fffc
        .word Start	; reset vector
        .word Start	; BRK vector
